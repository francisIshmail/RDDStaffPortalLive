using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System.IO;
using System.Net.Mime;

//using System.Configuration;
//using System.Reflection;

public partial class Intranet_Reporting_SAPInvoiceReport : System.Web.UI.Page
{
    ReportDocument myReport = new ReportDocument();
    //Sap objSap = new Sap();
    String pType, pDb, qInvID, qdocTypeID, qExtParam;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {

            pType = Request.QueryString["qType"];
            pDb = Request.QueryString["qDb"];
            qInvID = Request.QueryString["qInvID"];
            qdocTypeID = Request.QueryString["qdocTypeID"];
            qExtParam = Request.QueryString["qExtParam"];


            //myReport.Load(Server.MapPath("~/CrystalReport/sapInvoiceV1.rpt"));
            //myReport.SetDataSource(dt);

            //myReport.Refresh();
            //CrystalReportViewer1.ToolPanelView = CrystalDecisions.Web.ToolPanelViewType.None;
            //CrystalReportViewer1.ReportSource = myReport;

            //myReport.Close();
            //myReport.Refresh();

            

            TableLogOnInfos crtableLogoninfos = new TableLogOnInfos();
            TableLogOnInfo crtableLogoninfo = new TableLogOnInfo();
            ConnectionInfo crConnectionInfo = new ConnectionInfo();
            Tables CrTables ;

            myReport.Load(Server.MapPath("~/CrystalReport/sapInvoiceV2.rpt"));


            string[] conCreds = myGlobal.getConnectionStringForSapDBs("SAPSRVCrystalLogCreds").Split(';');  //special connection creds to connect SAP server

            crConnectionInfo.ServerName = conCreds[0];
            crConnectionInfo.UserID = conCreds[1]; ;
            crConnectionInfo.Password = conCreds[2]; ;

            if (pDb == "UG")
                crConnectionInfo.DatabaseName = conCreds[3];  //in case of Uganda sap it may be Ex. sapUGX
            else
                crConnectionInfo.DatabaseName = "sap" + pDb;  //database name becomes dynamic Ex. sapUG

            //return;

            CrTables = myReport.Database.Tables;

            foreach (CrystalDecisions.CrystalReports.Engine.Table CrTable in CrTables)

            {

                crtableLogoninfo = CrTable.LogOnInfo;

                crtableLogoninfo.ConnectionInfo = crConnectionInfo;

                CrTable.ApplyLogOnInfo(crtableLogoninfo);

            }


            // param 1

            ParameterFieldDefinitions crParameterFieldDefinitions1;
            ParameterFieldDefinition crParameterFieldDefinition1;
            ParameterValues crParameterValues1 = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue1 = new ParameterDiscreteValue();

            crParameterDiscreteValue1.Value = Convert.ToInt32(qInvID);  //Invoice Id  -- docEntry of OINV
            crParameterFieldDefinitions1 = myReport.DataDefinition.ParameterFields;
            crParameterFieldDefinition1 = crParameterFieldDefinitions1[0];
            crParameterValues1 = crParameterFieldDefinition1.CurrentValues;

            crParameterValues1.Clear();
            crParameterValues1.Add(crParameterDiscreteValue1);
            crParameterFieldDefinition1.ApplyCurrentValues(crParameterValues1);
            // param 2  

            ParameterFieldDefinitions crParameterFieldDefinitions2;
            ParameterFieldDefinition crParameterFieldDefinition2;
            ParameterValues crParameterValues2 = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue2 = new ParameterDiscreteValue();

            crParameterDiscreteValue2.Value = Convert.ToInt32(qdocTypeID);   //DocType  --- 13 for invoice
            crParameterFieldDefinitions2 = myReport.DataDefinition.ParameterFields;
            crParameterFieldDefinition2 = crParameterFieldDefinitions2[1];
            crParameterValues2 = crParameterFieldDefinition2.CurrentValues;

            crParameterValues2.Clear();
            crParameterValues2.Add(crParameterDiscreteValue2);
            crParameterFieldDefinition2.ApplyCurrentValues(crParameterValues2);

            // param 3

            ParameterFieldDefinitions crParameterFieldDefinitions3;
            ParameterFieldDefinition crParameterFieldDefinition3;
            ParameterValues crParameterValues3 = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue3 = new ParameterDiscreteValue();

            crParameterDiscreteValue3.Value = qExtParam;   //extParam   -- Pass   'Y' , not sure of what it means
            crParameterFieldDefinitions3 = myReport.DataDefinition.ParameterFields;
            crParameterFieldDefinition3 = crParameterFieldDefinitions3[2];
            crParameterValues3 = crParameterFieldDefinition3.CurrentValues;
            
            crParameterValues3.Clear();
            crParameterValues3.Add(crParameterDiscreteValue3);
            crParameterFieldDefinition3.ApplyCurrentValues(crParameterValues3);

            CrystalReportViewer1.ReportSource = myReport;

            CrystalReportViewer1.RefreshReport(); 

        
                if (pType == "pdf")
                {

                    MemoryStream oStream;
                    oStream = (MemoryStream)myReport.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    Response.Clear();
                    Response.Buffer = true;
                    Response.ContentType = "application/pdf";
                    Response.BinaryWrite(oStream.ToArray());
                    Response.End();
                }
                else
                {
                    ExportOptions exportOptions;

                    DiskFileDestinationOptions diskFileDestinationOptions = new DiskFileDestinationOptions();
                    ExcelFormatOptions formatTypeOptions = new ExcelFormatOptions();
                    formatTypeOptions.ExcelUseConstantColumnWidth = false;  //this resloves the issue of columns 

                    //destination folder...
                    diskFileDestinationOptions.DiskFileName = Server.MapPath("~/DownloadsUploads/saveTempFiles/sapInvoiceV1.xls");
                    exportOptions = myReport.ExportOptions;
                    exportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    exportOptions.ExportFormatType = ExportFormatType.Excel;
                    exportOptions.DestinationOptions = diskFileDestinationOptions;
                    exportOptions.FormatOptions = formatTypeOptions;
                    myReport.Export();
                    myReport.Close();
                    myReport.Dispose();
                    //myReport.Refresh();
                    Response.Redirect("~/DownloadsUploads/saveTempFiles/sapInvoiceV1.xls");
                }
            //}
        }
    }

    //static public DataSet getDataSet_SP(string storedProcName, SqlParameter[] param)
    //{

    //    DataSet ds = new DataSet();
    //    string thisConnectionString = myGlobal.getConnectionStringForSapDBs("UG");

    //    SqlConnection oConn = new SqlConnection(thisConnectionString);
    //    SqlCommand oCmd;

    //    try
    //    {
    //        oConn.Open();                                                       // Tempory until DAAB implementation
    //    }
    //    catch(Exception excp) 
    //    { 
    //    }

    //    oCmd = new SqlCommand(storedProcName, oConn);
    //    oCmd.CommandType = CommandType.StoredProcedure;

    //    for (int i = 0; i < param.Length; i++)
    //    {
    //        oCmd.Parameters.Add(param[i]);
    //    }

    //    SqlDataAdapter adp = new SqlDataAdapter(oCmd);

    //    adp.Fill(ds);
    //    oCmd.Parameters.Clear();
    //    ds.Dispose();
    //    oConn.Close();

    //    return ds;

    //}

    //public DataTable PLReportNew(String Period, String DB, string strfrom, string strto)
    //{
    //    SqlParameter[] param = new SqlParameter[4];
    //    param[0] = new SqlParameter("@Period", Period);
    //    param[1] = new SqlParameter("@DB", DB);
    //    param[2] = new SqlParameter("@from", strfrom);
    //    param[3] = new SqlParameter("@to", strto);
        
    //    if (DB == "UG")
    //        return getDataSet_SP("Proc_SAP_PL_UG", param).Tables[0];
    //    else if (DB == "KE")
    //        return getDataSet_SP("Proc_SAP_PL_KE", param).Tables[0];
    //    else if (DB == "DU")
    //        return getDataSet_SP("Proc_SAP_PL_DU", param).Tables[0];
    //    else if (DB == "TZ")
    //        return getDataSet_SP("Proc_SAP_PL_TZ", param).Tables[0];
    //    else
    //        return getDataSet_SP("Proc_SAP_PL_EPZ", param).Tables[0];

    //}

    
}